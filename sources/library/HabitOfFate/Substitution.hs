{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TupleSections #-}
{-# LANGUAGE UnicodeSyntax #-}

module HabitOfFate.Substitution where

import HabitOfFate.Prelude hiding (many)

import qualified Data.Char as Char
import Data.Text.Lazy.Builder
import Text.Parsec
import Text.Parsec.Char

import HabitOfFate.TH

data Gender = Male | Female | Neuter deriving (Eq,Ord,Read,Show)
deriveJSON ''Gender

data Character = Character Text Gender deriving (Eq,Ord,Read,Show)
deriveJSON ''Character

type Substitutions = Map Text Text

makeSubstitutionTable ‚à∑ [(Text,Character)] ‚Üí Substitutions
makeSubstitutionTable [] = mempty
makeSubstitutionTable table@((_,first_character@(Character _ _)):_) =
    mapFromList
    $
    makeNouns first_character
    ‚äï
    concatMap
      (\(key, character@(Character name _)) ‚Üí
          (name, name)
          :
          makeArticles key character ‚äï fmap (_1 ‚äï~ ('|' <| key)) (makeNouns character)
      )
      table
  where
    makeArticles ‚à∑ Text ‚Üí Character ‚Üí [(Text,Text)]
    makeArticles key (Character name _) =
        [("a " ‚äï key, articleValue False)
        ,("A " ‚äï key, articleValue True)
        ,("an " ‚äï key, articleValue False)
        ,("An " ‚äï key, articleValue True)
        ,("the " ‚äï key, "the " ‚äï name)
        ,("The " ‚äï key, "The " ‚äï name)
        ]
      where
        articleValue ‚à∑ ùîπ ‚Üí Text
        articleValue capitalize = article ‚äï " " ‚äï name
          where
            article =
              (_head %~ if capitalize then Char.toUpper else Char.toLower)
              $
              case name ^? _head of
                Just c | Char.toLower c ‚àà "aeiou" ‚Üí "an"
                _ ‚Üí "a"

    makeNouns ‚à∑ Character ‚Üí [(Text,Text)]
    makeNouns (Character _ gender) = concat
        [subject_pronouns
        ,object_pronouns
        ,possessive_prononuns
        ,descriptive_possessive_pronouns
        ,category_nouns
        ]
      where
        capitalized = (_head %~ Char.toUpper)

        subject_pronouns =
            fmap (,pronoun) ["he","she","it"]
            ‚äï
            fmap (,capitalized pronoun) ["He","She","It"]
          where
            pronoun = case gender of
                Male ‚Üí "he"
                Female ‚Üí "she"
                Neuter ‚Üí "it"

        object_pronouns = fmap (,pronoun) ["him","her","it"]
          where
            pronoun = case gender of
                Male ‚Üí "him"
                Female ‚Üí "her"
                Neuter ‚Üí "it"

        possessive_prononuns =
            fmap (,pronoun) ["his","her'","its"]
            ‚äï
            fmap (,capitalized pronoun) ["His","Her","Its"]
          where
            pronoun = case gender of
                Male ‚Üí "his"
                Female ‚Üí "her"
                Neuter ‚Üí "its"

        descriptive_possessive_pronouns =
            fmap (,pronoun) ["his","hers","its"]
          where
            pronoun = case gender of
                Male ‚Üí "his"
                Female ‚Üí "her"
                Neuter ‚Üí "its"

        category_nouns =
            fmap (,category) ["man","woman","thing"]
          where
            category = case gender of
                Male ‚Üí "man"
                Female ‚Üí "woman"
                Neuter ‚Üí "thing"


substitute ‚à∑ Substitutions ‚Üí Text ‚Üí Text
substitute table =
  either
    (error ‚àò show)
    id
  ‚àò
  runParser parser () ""
  where
    parser ‚à∑ Parsec Text () Text
    parser =
      mappend
        <$> takeTillNextSub
        <*> (fmap mconcat ‚àò many $ mappend <$> parseAnotherSub <*> takeTillNextSub)

    takeTillNextSub = (^. packed) <$> many (satisfy (/='{'))

    parseAnotherSub = do
      char '{'
      key ‚Üê unwords ‚àò words <$> many1 (satisfy (/='}'))
      when ('{' ‚àà key) $ fail "nested brace"
      char '}'
      case lookup (key ^. packed) table of
        Nothing ‚Üí fail $ printf "key %s was not found in the table" key
        Just value ‚Üí return value
